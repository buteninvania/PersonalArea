{"ast":null,"code":"import { authAPI } from \"../API/auth-api\";\nimport { stopSubmit } from \"redux-form\";\nimport { successCheck } from \"../Utils/Validators/validators\";\nconst initialState = {\n  login: \"\",\n  isAuth: false\n};\n\nconst authReducer = (state = initialState, action) => {\n  switch (action.type) {\n    case \"FrontEnd/practice/SET-USER-DATA\":\n      return { ...state,\n        ...action.payload\n      };\n\n    default:\n      return state;\n  }\n};\n\nconst actions = {\n  setAuthUserData: (login, isAuth) => ({\n    type: \"FrontEnd/practice/SET-USER-DATA\",\n    payload: {\n      login,\n      isAuth\n    }\n  })\n};\nexport const login = (login, password) => async dispatch => {\n  if (successCheck(login, password) == null) {\n    let resultCode = 1;\n    let isAuth = true;\n    let id = 1;\n    await authAPI.login(login, password, resultCode, isAuth, id);\n    dispatch(getAuthUserData());\n  } else {\n    const message = successCheck(login, password);\n    dispatch(stopSubmit(\"login\", {\n      _error: message\n    }));\n  }\n};\nexport const logout = () => async dispatch => {\n  await authAPI.logout();\n  dispatch(actions.setAuthUserData(\"\", false));\n};\nexport const getAuthUserData = () => async dispatch => {\n  const data = await authAPI.checkAuth();\n\n  if (data.resultCode === 1) {\n    const {\n      login\n    } = data;\n    dispatch(actions.setAuthUserData(login, true));\n  } else if (data.resultCode === 0) {\n    dispatch(actions.setAuthUserData(\"\", false));\n  }\n};\nexport default authReducer;","map":{"version":3,"sources":["/home/butenin/dev/PracticeFrontend/Frontend/src/Redux/auth-reducer.js"],"names":["authAPI","stopSubmit","successCheck","initialState","login","isAuth","authReducer","state","action","type","payload","actions","setAuthUserData","password","dispatch","resultCode","id","getAuthUserData","message","_error","logout","data","checkAuth"],"mappings":"AAAA,SAAQA,OAAR,QAAsB,iBAAtB;AACA,SAAQC,UAAR,QAAyB,YAAzB;AACA,SAAQC,YAAR,QAA2B,gCAA3B;AAEA,MAAMC,YAAY,GAAG;AACjBC,EAAAA,KAAK,EAAE,EADU;AAEjBC,EAAAA,MAAM,EAAE;AAFS,CAArB;;AAKA,MAAMC,WAAW,GAAG,CAACC,KAAK,GAAGJ,YAAT,EAAuBK,MAAvB,KAAkC;AAClD,UAAQA,MAAM,CAACC,IAAf;AACI,SAAK,iCAAL;AACI,aAAO,EACH,GAAGF,KADA;AAEH,WAAGC,MAAM,CAACE;AAFP,OAAP;;AAIJ;AACI,aAAOH,KAAP;AAPR;AASH,CAVD;;AAYA,MAAMI,OAAO,GAAG;AACZC,EAAAA,eAAe,EAAE,CAACR,KAAD,EAAQC,MAAR,MAAoB;AACjCI,IAAAA,IAAI,EAAC,iCAD4B;AAEjCC,IAAAA,OAAO,EAAE;AAACN,MAAAA,KAAD;AAAQC,MAAAA;AAAR;AAFwB,GAApB;AADL,CAAhB;AAOA,OAAO,MAAMD,KAAK,GAAG,CAACA,KAAD,EAAQS,QAAR,KAAqB,MAAOC,QAAP,IAAoB;AAC1D,MAAGZ,YAAY,CAACE,KAAD,EAAQS,QAAR,CAAZ,IAAiC,IAApC,EAA0C;AACtC,QAAIE,UAAU,GAAG,CAAjB;AACA,QAAIV,MAAM,GAAG,IAAb;AACA,QAAIW,EAAE,GAAG,CAAT;AACA,UAAMhB,OAAO,CAACI,KAAR,CAAcA,KAAd,EAAqBS,QAArB,EAA+BE,UAA/B,EAA2CV,MAA3C,EAAmDW,EAAnD,CAAN;AACAF,IAAAA,QAAQ,CAACG,eAAe,EAAhB,CAAR;AACH,GAND,MAMO;AACH,UAAMC,OAAO,GAAGhB,YAAY,CAACE,KAAD,EAAQS,QAAR,CAA5B;AACAC,IAAAA,QAAQ,CAACb,UAAU,CAAC,OAAD,EAAU;AAACkB,MAAAA,MAAM,EAAED;AAAT,KAAV,CAAX,CAAR;AACH;AACJ,CAXM;AAYP,OAAO,MAAME,MAAM,GAAG,MAAM,MAAON,QAAP,IAAoB;AAC5C,QAAMd,OAAO,CAACoB,MAAR,EAAN;AACAN,EAAAA,QAAQ,CAACH,OAAO,CAACC,eAAR,CAAwB,EAAxB,EAA4B,KAA5B,CAAD,CAAR;AACH,CAHM;AAIP,OAAO,MAAMK,eAAe,GAAG,MAAM,MAAOH,QAAP,IAAoB;AACrD,QAAMO,IAAI,GAAG,MAAMrB,OAAO,CAACsB,SAAR,EAAnB;;AACA,MAAID,IAAI,CAACN,UAAL,KAAoB,CAAxB,EAA2B;AACvB,UAAM;AAACX,MAAAA;AAAD,QAAUiB,IAAhB;AACAP,IAAAA,QAAQ,CAACH,OAAO,CAACC,eAAR,CAAwBR,KAAxB,EAA+B,IAA/B,CAAD,CAAR;AACH,GAHD,MAGO,IAAIiB,IAAI,CAACN,UAAL,KAAoB,CAAxB,EAA2B;AAC9BD,IAAAA,QAAQ,CAACH,OAAO,CAACC,eAAR,CAAwB,EAAxB,EAA4B,KAA5B,CAAD,CAAR;AACH;AACJ,CARM;AASP,eAAeN,WAAf","sourcesContent":["import {authAPI} from \"../API/auth-api\";\nimport {stopSubmit} from \"redux-form\";\nimport {successCheck} from \"../Utils/Validators/validators\";\n\nconst initialState = {\n    login: \"\",\n    isAuth: false\n}\n\nconst authReducer = (state = initialState, action) => {\n    switch (action.type) {\n        case \"FrontEnd/practice/SET-USER-DATA\":\n            return {\n                ...state,\n                ...action.payload\n            }\n        default:\n            return state\n    }\n}\n\nconst actions = {\n    setAuthUserData: (login, isAuth) => ({\n        type:\"FrontEnd/practice/SET-USER-DATA\",\n        payload: {login, isAuth}\n    })\n}\n\nexport const login = (login, password) => async (dispatch) => {\n    if(successCheck(login, password) == null) {\n        let resultCode = 1\n        let isAuth = true\n        let id = 1\n        await authAPI.login(login, password, resultCode, isAuth, id)\n        dispatch(getAuthUserData())\n    } else {\n        const message = successCheck(login, password)\n        dispatch(stopSubmit(\"login\", {_error: message}))\n    }\n}\nexport const logout = () => async (dispatch) => {\n    await authAPI.logout()\n    dispatch(actions.setAuthUserData(\"\", false))\n}\nexport const getAuthUserData = () => async (dispatch) => {\n    const data = await authAPI.checkAuth()\n    if (data.resultCode === 1) {\n        const {login} = data\n        dispatch(actions.setAuthUserData(login, true))\n    } else if (data.resultCode === 0) {\n        dispatch(actions.setAuthUserData(\"\", false))\n    }\n}\nexport default authReducer"]},"metadata":{},"sourceType":"module"}