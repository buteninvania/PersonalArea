{"ast":null,"code":"import { contactsAPI } from \"../API/contacts-api\";\nconst initialState = {\n  contacts: []\n};\n\nconst contactsReducer = (state = initialState, action) => {\n  switch (action.type) {\n    case \"FrontEnd/practice/SET_CONTACT\":\n      return { ...state,\n        contacts: action.contacts\n      };\n\n    default:\n      return state;\n  }\n};\n\nexport const actions = {\n  setContact: contacts => ({\n    type: \"FrontEnd/practice/SET_CONTACT\",\n    contacts\n  })\n};\nexport const getContacts = (filter = \"\") => {\n  return async dispatch => {\n    debugger;\n    const data = await contactsAPI.getContacts(filter.term);\n    dispatch(actions.setContact(data));\n  };\n};\nexport const addContact = (name, email, phoneNumber, position) => {\n  return async dispatch => {\n    await contactsAPI.addContacts(name, email, phoneNumber, position);\n    dispatch(getContacts());\n  };\n};\nexport const deleteContact = contactId => {\n  return async dispatch => {\n    await contactsAPI.deleteContact(contactId);\n    dispatch(getContacts());\n  };\n};\nexport const saveContacts = (id, name, email, phoneNumber, position) => {\n  return async dispatch => {\n    contactsAPI.updateContacts(id, name, email, phoneNumber, position);\n    debugger;\n    await dispatch(getContacts());\n  };\n};\nexport default contactsReducer;","map":{"version":3,"sources":["/home/butenin/dev/PracticeFrontend/Frontend/src/Redux/contacts-reducer.js"],"names":["contactsAPI","initialState","contacts","contactsReducer","state","action","type","actions","setContact","getContacts","filter","dispatch","data","term","addContact","name","email","phoneNumber","position","addContacts","deleteContact","contactId","saveContacts","id","updateContacts"],"mappings":"AAAA,SAAQA,WAAR,QAA0B,qBAA1B;AAEA,MAAMC,YAAY,GAAG;AACjBC,EAAAA,QAAQ,EAAE;AADO,CAArB;;AAIA,MAAMC,eAAe,GAAG,CAACC,KAAK,GAAGH,YAAT,EAAuBI,MAAvB,KAAkC;AACtD,UAAQA,MAAM,CAACC,IAAf;AACI,SAAK,+BAAL;AACI,aAAO,EAAC,GAAGF,KAAJ;AAAWF,QAAAA,QAAQ,EAAEG,MAAM,CAACH;AAA5B,OAAP;;AACJ;AACI,aAAOE,KAAP;AAJR;AAMH,CAPD;;AASA,OAAO,MAAMG,OAAO,GAAG;AACnBC,EAAAA,UAAU,EAAGN,QAAD,KAAe;AAACI,IAAAA,IAAI,EAAE,+BAAP;AAAwCJ,IAAAA;AAAxC,GAAf;AADO,CAAhB;AAGP,OAAO,MAAMO,WAAW,GAAG,CAACC,MAAM,GAAC,EAAR,KAAe;AACtC,SAAO,MAAOC,QAAP,IAAoB;AACvB;AACA,UAAMC,IAAI,GAAG,MAAMZ,WAAW,CAACS,WAAZ,CAAwBC,MAAM,CAACG,IAA/B,CAAnB;AACAF,IAAAA,QAAQ,CAACJ,OAAO,CAACC,UAAR,CAAmBI,IAAnB,CAAD,CAAR;AACH,GAJD;AAKH,CANM;AAOP,OAAO,MAAME,UAAU,GAAG,CAACC,IAAD,EAAOC,KAAP,EAAcC,WAAd,EAA2BC,QAA3B,KAAwC;AAC9D,SAAO,MAAOP,QAAP,IAAoB;AACvB,UAAMX,WAAW,CAACmB,WAAZ,CAAwBJ,IAAxB,EAA8BC,KAA9B,EAAqCC,WAArC,EAAkDC,QAAlD,CAAN;AACAP,IAAAA,QAAQ,CAACF,WAAW,EAAZ,CAAR;AACH,GAHD;AAIH,CALM;AAMP,OAAO,MAAMW,aAAa,GAAIC,SAAD,IAAe;AACxC,SAAO,MAAOV,QAAP,IAAoB;AACvB,UAAMX,WAAW,CAACoB,aAAZ,CAA0BC,SAA1B,CAAN;AACAV,IAAAA,QAAQ,CAACF,WAAW,EAAZ,CAAR;AACH,GAHD;AAIH,CALM;AAMP,OAAO,MAAMa,YAAY,GAAG,CAACC,EAAD,EAAKR,IAAL,EAAWC,KAAX,EAAkBC,WAAlB,EAA+BC,QAA/B,KAA4C;AACpE,SAAO,MAAOP,QAAP,IAAoB;AACvBX,IAAAA,WAAW,CAACwB,cAAZ,CAA2BD,EAA3B,EAA+BR,IAA/B,EAAqCC,KAArC,EAA4CC,WAA5C,EAAyDC,QAAzD;AACA;AACA,UAAMP,QAAQ,CAACF,WAAW,EAAZ,CAAd;AACH,GAJD;AAKH,CANM;AASP,eAAeN,eAAf","sourcesContent":["import {contactsAPI} from \"../API/contacts-api\";\n\nconst initialState = {\n    contacts: [],\n}\n\nconst contactsReducer = (state = initialState, action) => {\n    switch (action.type) {\n        case \"FrontEnd/practice/SET_CONTACT\":\n            return {...state, contacts: action.contacts}\n        default:\n            return state\n    }\n}\n\nexport const actions = {\n    setContact: (contacts) => ({type: \"FrontEnd/practice/SET_CONTACT\", contacts}),\n}\nexport const getContacts = (filter=\"\") => {\n    return async (dispatch) => {\n        debugger\n        const data = await contactsAPI.getContacts(filter.term)\n        dispatch(actions.setContact(data))\n    }\n}\nexport const addContact = (name, email, phoneNumber, position) => {\n    return async (dispatch) => {\n        await contactsAPI.addContacts(name, email, phoneNumber, position)\n        dispatch(getContacts())\n    }\n}\nexport const deleteContact = (contactId) => {\n    return async (dispatch) => {\n        await contactsAPI.deleteContact(contactId)\n        dispatch(getContacts())\n    }\n}\nexport const saveContacts = (id, name, email, phoneNumber, position) => {\n    return async (dispatch) => {\n        contactsAPI.updateContacts(id, name, email, phoneNumber, position)\n        debugger\n        await dispatch(getContacts())\n    }\n}\n\n\nexport default contactsReducer"]},"metadata":{},"sourceType":"module"}